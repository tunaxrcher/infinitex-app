// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// ============================================
// USER TYPES (Customer & Agent only)
// ============================================

enum UserType {
  CUSTOMER
  AGENT
}

// User authentication and profile (Customer & Agent)
model User {
  id          String   @id @default(cuid())
  phoneNumber String   @unique @db.VarChar(20)
  pin         String?  @db.VarChar(255) // 4-digit PIN (will be replaced by OTP in future)
  
  // OTP fields for future use
  otpSecret   String?  @db.VarChar(255)
  otpEnabled  Boolean  @default(false)
  lastOtpSentAt DateTime?
  
  userType    UserType @default(CUSTOMER)
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Profile information
  profile UserProfile?

  // Customer relationships
  loanApplications LoanApplication[] @relation("CustomerApplications")
  loans            Loan[]           @relation("CustomerLoans")
  payments         Payment[]
  notifications    Notification[]
  coinTransactions CoinTransaction[]
  rewardRedemptions RewardRedemption[]
  sessions         Session[]

  // Agent relationships
  agentApplications LoanApplication[] @relation("AgentApplications")
  agentCustomers    AgentCustomer[]  @relation("AgentRelationships")
  customerAgents    AgentCustomer[]  @relation("CustomerAgents")
  managedLoans      Loan[]           @relation("AgentManagedLoans")

  @@map("users")
}

// Extended user profile information
model UserProfile {
  id       String  @id @default(cuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal information
  firstName    String?  @db.VarChar(255)
  lastName     String?  @db.VarChar(255)
  idCardNumber String?  @unique @db.VarChar(13)
  dateOfBirth  DateTime?
  address      String?  @db.Text
  
  // Contact information
  email        String?  @db.VarChar(255)
  lineId       String?  @db.VarChar(255)
  
  // KYC documents
  idCardFrontImage String? @db.VarChar(500)
  idCardBackImage  String? @db.VarChar(500)
  
  // Preferences
  preferredLanguage String @default("th") @db.VarChar(10)
  notificationEnabled Boolean @default(true)
  
  // Coin system
  coinBalance Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profiles")
}

// Agent-Customer relationship management
model AgentCustomer {
  id         String   @id @default(cuid())
  agentId    String
  customerId String
  agent      User     @relation("AgentRelationships", fields: [agentId], references: [id], onDelete: Cascade)
  customer   User     @relation("CustomerAgents", fields: [customerId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)

  @@unique([agentId, customerId])
  @@index([agentId])
  @@index([customerId])
  @@map("agent_customers")
}

// ============================================
// ADMIN SYSTEM (Separate from Users)
// ============================================

enum AdminRole {
  SUPER_ADMIN      // ทำได้ทุกอย่าง
  LOAN_OFFICER     // จัดการสินเชื่อ
  CUSTOMER_SERVICE // ดูแลลูกค้า
  FINANCE          // จัดการการเงิน
  CONTENT_MANAGER  // จัดการ Banner/Privilege
}

enum PermissionCode {
  // Loan Application Management
  VIEW_APPLICATIONS
  APPROVE_APPLICATIONS
  REJECT_APPLICATIONS
  
  // Loan Management
  VIEW_LOANS
  CREATE_LOANS
  UPDATE_LOANS
  DELETE_LOANS
  
  // User Management
  VIEW_USERS
  CREATE_USERS
  UPDATE_USERS
  DELETE_USERS
  MANAGE_AGENTS
  
  // Payment Management
  VIEW_PAYMENTS
  PROCESS_PAYMENTS
  REFUND_PAYMENTS
  
  // Content Management
  MANAGE_BANNERS
  MANAGE_PRIVILEGES
  MANAGE_REWARDS
  
  // System Configuration
  MANAGE_SYSTEM_CONFIG
  VIEW_AUDIT_LOGS
  
  // Reports & Analytics
  VIEW_REPORTS
  EXPORT_DATA
}

// Admin users (ระบบหลังบ้าน)
model Admin {
  id          String    @id @default(cuid())
  email       String    @unique @db.VarChar(255)
  password    String    @db.VarChar(255) // Hashed password
  
  // Admin information
  firstName   String    @db.VarChar(255)
  lastName    String    @db.VarChar(255)
  role        AdminRole @default(LOAN_OFFICER)
  
  // Status
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  permissions AdminPermission[]
  sessions    AdminSession[]
  auditLogs   AuditLog[]
  reviewedApplications LoanApplication[] @relation("AdminReviewed")

  @@map("admins")
}

// Admin permissions (fine-grained control)
model AdminPermission {
  id         String         @id @default(cuid())
  adminId    String
  admin      Admin          @relation(fields: [adminId], references: [id], onDelete: Cascade)
  permission PermissionCode
  
  grantedAt  DateTime       @default(now())
  grantedBy  String?        @db.VarChar(255) // Admin ID who granted this

  @@unique([adminId, permission])
  @@index([adminId])
  @@map("admin_permissions")
}

// Admin session management (separate from user sessions)
model AdminSession {
  id          String   @id @default(cuid())
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  token       String   @unique @db.VarChar(500)
  deviceInfo  String?  @db.VarChar(500)
  ipAddress   String?  @db.VarChar(45)
  userAgent   String?  @db.Text
  
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@index([adminId])
  @@index([token])
  @@map("admin_sessions")
}

// ============================================
// LOAN SYSTEM
// ============================================

enum LoanType {
  HOUSE_LAND_MORTGAGE  // สินเชื่อจำนองบ้านและโฉนดที่ดิน
  CAR_REGISTRATION     // สินเชื่อทะเบียนรถ (future)
  FINX_PLUS           // สินเชื่อ FinX พลัส (future)
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  CANCELLED
}

// Loan application workflow
model LoanApplication {
  id          String            @id @default(cuid())
  
  // Relationships
  customerId  String
  customer    User              @relation("CustomerApplications", fields: [customerId], references: [id], onDelete: Cascade)
  agentId     String?           // Optional: if submitted by agent
  agent       User?             @relation("AgentApplications", fields: [agentId], references: [id])
  
  // Application details
  loanType    LoanType          @default(HOUSE_LAND_MORTGAGE)
  status      ApplicationStatus @default(DRAFT)
  
  // Multi-step form tracking
  currentStep       Int       @default(1)
  completedSteps    Json      @default("[]") // Array of completed step numbers
  isNewUser         Boolean   @default(false)
  submittedByAgent  Boolean   @default(false)
  
  // Step 1: Title deed information
  titleDeedImage    String?  @db.VarChar(500)
  titleDeedData     Json?
  
  // Step 2: Supporting documents
  supportingImages  Json     @default("[]") // Array of image URLs
  
  // Step 3: ID Card (for new users)
  idCardFrontImage  String?  @db.VarChar(500)
  idCardBackImage   String?  @db.VarChar(500)
  
  // Step 4: Loan amount
  requestedAmount   Decimal  @default(0) @db.Decimal(15, 2)
  approvedAmount    Decimal? @db.Decimal(15, 2)
  maxApprovedAmount Decimal? @db.Decimal(15, 2) // System calculated maximum
  
  // Property information (from AI processing)
  propertyType      String?  @db.VarChar(100)
  propertyValue     Decimal? @db.Decimal(15, 2)
  propertyArea      String?  @db.VarChar(100)
  propertyLocation  String?  @db.Text
  landNumber        String?  @db.VarChar(100)
  ownerName         String?  @db.VarChar(255)
  
  // Application metadata
  submittedAt       DateTime?
  reviewedAt        DateTime?
  reviewedBy        String?   // Admin ID
  reviewedByAdmin   Admin?    @relation("AdminReviewed", fields: [reviewedBy], references: [id])
  reviewNotes       String?   @db.Text
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // If approved, creates a loan
  loan              Loan?

  @@index([customerId])
  @@index([agentId])
  @@index([status])
  @@index([reviewedBy])
  @@map("loan_applications")
}

enum LoanStatus {
  ACTIVE
  COMPLETED
  DEFAULTED
  CANCELLED
}

// Active loans
model Loan {
  id                String     @id @default(cuid())
  loanNumber        String     @unique @db.VarChar(50)
  
  // Relationships
  customerId        String
  customer          User       @relation("CustomerLoans", fields: [customerId], references: [id], onDelete: Cascade)
  agentId           String?
  agent             User?      @relation("AgentManagedLoans", fields: [agentId], references: [id])
  applicationId     String     @unique
  application       LoanApplication @relation(fields: [applicationId], references: [id])
  
  // Loan details
  loanType          LoanType
  status            LoanStatus @default(ACTIVE)
  principalAmount   Decimal    @db.Decimal(15, 2)
  interestRate      Decimal    @db.Decimal(5, 2) // Annual interest rate
  termMonths        Int        // Loan term in months
  monthlyPayment    Decimal    @db.Decimal(15, 2)
  
  // Payment tracking
  currentInstallment Int       @default(0)
  totalInstallments  Int
  remainingBalance   Decimal   @db.Decimal(15, 2)
  nextPaymentDate    DateTime
  
  // Contract information
  contractDate       DateTime
  expiryDate         DateTime
  titleDeedNumber    String?   @db.VarChar(100)
  
  // Collateral information
  collateralValue    Decimal?  @db.Decimal(15, 2)
  collateralDetails  Json?
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Related records
  payments           Payment[]
  installments       LoanInstallment[]

  @@index([customerId])
  @@index([agentId])
  @@index([status])
  @@index([loanNumber])
  @@map("loans")
}

// Loan installment schedule
model LoanInstallment {
  id              String   @id @default(cuid())
  loanId          String
  loan            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  
  installmentNumber Int
  dueDate         DateTime
  principalAmount Decimal  @db.Decimal(15, 2)
  interestAmount  Decimal  @db.Decimal(15, 2)
  totalAmount     Decimal  @db.Decimal(15, 2)
  
  isPaid          Boolean  @default(false)
  paidDate        DateTime?
  paidAmount      Decimal? @db.Decimal(15, 2)
  
  // Late payment tracking
  isLate          Boolean  @default(false)
  lateDays        Int?
  lateFee         Decimal? @db.Decimal(15, 2)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relation to payments
  payments        Payment[]

  @@unique([loanId, installmentNumber])
  @@index([loanId])
  @@index([dueDate])
  @@map("loan_installments")
}

// ============================================
// PAYMENT SYSTEM
// ============================================

enum PaymentMethod {
  QR_CODE
  BARCODE
  INTERNET_BANKING  // Future
  BANK_TRANSFER     // Future
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// Payment records
model Payment {
  id              String        @id @default(cuid())
  
  // Relationships
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  loanId          String
  loan            Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  
  // Link to installment
  installmentId   String?
  installment     LoanInstallment? @relation(fields: [installmentId], references: [id])
  
  // Payment details
  amount          Decimal       @db.Decimal(15, 2)
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(PENDING)
  
  // Payment reference
  referenceNumber String        @unique @db.VarChar(100)
  transactionId   String?       @db.VarChar(100) // External transaction ID
  
  // QR/Barcode specific
  qrCode          String?       @db.Text
  barcodeNumber   String?       @db.VarChar(50)
  
  // Bank details
  bankName        String?       @db.VarChar(100)
  accountNumber   String?       @db.VarChar(50)
  accountName     String?       @db.VarChar(255)
  
  // Timing
  dueDate         DateTime
  paidDate        DateTime?
  
  // Breakdown
  principalAmount Decimal       @default(0) @db.Decimal(15, 2)
  interestAmount  Decimal       @default(0) @db.Decimal(15, 2)
  feeAmount       Decimal       @default(0) @db.Decimal(15, 2)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([loanId])
  @@index([installmentId])
  @@index([status])
  @@index([referenceNumber])
  @@map("payments")
}

// ============================================
// NOTIFICATION SYSTEM
// ============================================

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  LOAN_APPROVED
  LOAN_REJECTED
  SYSTEM_ANNOUNCEMENT
  PROMOTION
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        NotificationType
  title       String       @db.VarChar(255)
  message     String       @db.Text
  actionUrl   String?      @db.VarChar(500)
  
  isRead      Boolean          @default(false)
  readAt      DateTime?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

// ============================================
// GAMIFICATION (COIN SYSTEM)
// ============================================

enum CoinTransactionType {
  EARNED_SIGNUP         // สมัครสมาชิก
  EARNED_ON_TIME_PAYMENT // ชำระตรงเวลา
  EARNED_DAILY_TASK     // ภาระรายวัน
  EARNED_PROMOTION      // โปรโมชั่น
  REDEEMED_REWARD       // แลกของรางวัล
  EXPIRED               // หมดอายุ
}

model CoinTransaction {
  id          String              @id @default(cuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        CoinTransactionType
  amount      Int                 // Positive for earning, negative for spending
  description String              @db.VarChar(500)
  
  // Related records
  loanId      String?             // If related to loan payment
  rewardId    String?             // If related to reward redemption
  
  createdAt   DateTime            @default(now())

  @@index([userId])
  @@index([type])
  @@map("coin_transactions")
}

// Reward catalog for coin redemption
model Reward {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String   @db.Text
  coinCost    Int
  imageUrl    String?  @db.VarChar(500)
  
  isActive    Boolean  @default(true)
  stockCount  Int?     // null = unlimited
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Track redemptions
  redemptions RewardRedemption[]

  @@index([isActive])
  @@map("rewards")
}

enum RedemptionStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

model RewardRedemption {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  rewardId    String
  reward      Reward           @relation(fields: [rewardId], references: [id])
  
  coinSpent   Int
  status      RedemptionStatus @default(PENDING)
  
  // Delivery information
  deliveryAddress String?      @db.Text
  trackingNumber  String?      @db.VarChar(100)
  
  redeemedAt  DateTime @default(now())
  deliveredAt DateTime?

  @@index([userId])
  @@index([rewardId])
  @@index([status])
  @@map("reward_redemptions")
}

// ============================================
// CONTENT MANAGEMENT
// ============================================

// System banners for homepage
model Banner {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  description String?  @db.Text
  imageUrl    String   @db.VarChar(500)
  actionUrl   String?  @db.VarChar(500)
  
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  // User targeting - JSON array: ["CUSTOMER", "AGENT"]
  targetUserTypes Json @default("[\"CUSTOMER\", \"AGENT\"]")
  
  startDate   DateTime?
  endDate     DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([sortOrder])
  @@map("banners")
}

// Special privileges/offers
model Privilege {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  description String   @db.Text
  imageUrl    String?  @db.VarChar(500)
  actionUrl   String?  @db.VarChar(500)
  
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  // Enhanced fields - JSON array: ["CUSTOMER"]
  targetUserTypes Json    @default("[\"CUSTOMER\"]")
  coinCost        Int?
  requiresLoan    Boolean @default(false)
  
  validFrom   DateTime?
  validUntil  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([sortOrder])
  @@map("privileges")
}

// ============================================
// SYSTEM CONFIGURATION & AUDIT
// ============================================

// System configuration
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique @db.VarChar(255)
  value String @db.Text
  
  description String? @db.Text
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@map("system_config")
}

// User session management (Customer & Agent)
model Session {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token       String   @unique @db.VarChar(500)
  deviceInfo  String?  @db.VarChar(500)
  ipAddress   String?  @db.VarChar(45)
  userAgent   String?  @db.Text
  
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([token])
  @@map("sessions")
}

// Audit log for important actions
model AuditLog {
  id        String   @id @default(cuid())
  
  // Who performed the action (can be admin or system)
  adminId   String?  @db.VarChar(255)
  admin     Admin?   @relation(fields: [adminId], references: [id])
  
  action    String   @db.VarChar(100)
  entity    String   @db.VarChar(100) // table name
  entityId  String   @db.VarChar(255) // record ID
  oldData   Json?
  newData   Json?
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.Text
  
  createdAt DateTime @default(now())

  @@index([adminId])
  @@index([entity])
  @@index([createdAt])
  @@map("audit_logs")
}